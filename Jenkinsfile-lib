pipeline {
    agent any

    environment {
        PYTHON_VERSION = '3.11'
    }

    stages {
        stage('Setup Python Environment') {
            steps {
                script {
                    // Install Poetry
                    sh 'pip install --user poetry'
                    
                    // Ensure Python 3.11 is available, fail if not
                    sh '''
                        if ! command -v python3.11 &> /dev/null; then
                            echo "Error: Python 3.11 is not installed or not in PATH."
                            exit 1
                        fi
                    '''
                    
                    // Get the actual Python 3.11 binary path
                    sh '''
                        PYTHON_PATH=$(command -v python3.11)
                        echo "Using Python at: $PYTHON_PATH"

                        cd dynaface-lib
                        poetry env use "$PYTHON_PATH"
                        poetry run python --version
                    '''
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    // Change to the correct directory before running Poetry commands
                    sh '''
                        cd dynaface-lib
                        poetry install
                    '''
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Run tests from the correct directory
                    sh '''
                        cd dynaface-lib
                        poetry run pytest tests
                    '''
                }
            }
        }

        stage('Build Package') {
            steps {
                script {
                    // Build the package from the correct directory
                    sh '''
                        cd dynaface-lib
                        poetry build
                    '''
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                script {
                    // Ensure archive path is correct
                    sh '''
                        cd dynaface-lib
                        mkdir -p dist  # Ensure dist exists
                    '''
                    archiveArtifacts artifacts: 'dynaface-lib/dist/*.whl', fingerprint: true
                }
            }
        }
    }

    post {
        always {
            script {
                // Clean up Poetry's cache (optional)
                sh '''
                    cd dynaface-lib
                    poetry cache clear pypi --all
                '''
            }
        }
    }
}
