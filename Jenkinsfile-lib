pipeline {
    agent any

    environment {
        PYTHON_VERSION = '3.11'
    }
    stages {
        stage('Setup Python Environment') {
            steps {
                script {
                    // Install Poetry
                    sh 'pip install --user poetry'
                    
                    // Ensure Python 3.11 is available, fail if not
                    sh '''
                        if ! command -v python3.11 &> /dev/null; then
                            echo "Error: Python 3.11 is not installed or not in PATH."
                            exit 1
                        fi
                    '''
                    
                    // Get the actual Python 3.11 binary path
                    sh '''
                        PYTHON_PATH=$(command -v python3.11)
                        echo "Using Python at: $PYTHON_PATH"

                        cd dynaface-lib
                        poetry env use "$PYTHON_PATH"
                        poetry run python --version
                    '''
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    // Change to the correct directory before running Poetry commands
                    sh '''
                        cd dynaface-lib
                        poetry install
                        poetry run pip install --upgrade setuptools
                    '''
                }
            }
        }

        stage('Run Tests & Generate Coverage') {
            steps {
                script {
                    sh '''
                        cd dynaface-lib
                        export PATH="$HOME/.pyenv/bin:$PATH"
                        eval "$(pyenv init --path)"
                        eval "$(pyenv virtualenv-init -)"
                        poetry run pytest tests --junitxml=unit_test_results.xml --cov=./ --cov-report=xml:coverage.xml --cov-report=html
                    '''
                }
            }
        }

        stage('Build Package') {
            steps {
                script {
                    // Build the package from the correct directory
                    sh '''
                        cd dynaface-lib
                        poetry build
                    '''
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                script {
                    // Ensure the necessary paths exist before archiving
                    sh '''
                        cd dynaface-lib
                        mkdir -p dist  # Ensure dist exists
                    '''
                    archiveArtifacts artifacts: 'dynaface-lib/dist/*.whl', fingerprint: true
                    archiveArtifacts artifacts: 'dynaface-lib/coverage.xml', allowEmptyArchive: true  // Archive coverage XML
                    archiveArtifacts artifacts: 'dynaface-lib/htmlcov/**', allowEmptyArchive: true  // Archive HTML coverage
                }
            }
        }
        stage('Upload to S3') {
            steps {
                script {
                    sh '''
                        AWS_BUCKET_NAME="data.heatonresearch.com"
                        AWS_BUCKET_PATH="library/"

                        echo "Uploading built package to S3 at s3://$AWS_BUCKET_NAME/$AWS_BUCKET_PATH..."

                        cd dynaface-lib/dist
                        aws s3 cp *.whl s3://$AWS_BUCKET_NAME/$AWS_BUCKET_PATH --acl public-read
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                // Clean up Poetry's cache (optional)
                sh '''
                    cd dynaface-lib
                    poetry cache clear pypi --all
                '''
            }
            // Archive test and coverage results
            junit 'dynaface-lib/unit_test_results.xml'
            recordCoverage(
                tools: [[parser: 'COBERTURA', pattern: 'dynaface-lib/coverage.xml']],
                id: 'pytest-coverage',
                name: 'Pytest Coverage',
                sourceCodeRetention: 'EVERY_BUILD',
                qualityGates: [
                    [threshold: 60.0, metric: 'LINE', baseline: 'PROJECT', unstable: true],
                    [threshold: 60.0, metric: 'BRANCH', baseline: 'PROJECT', unstable: true]
                ]
            )
        }
    }
}